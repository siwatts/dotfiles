" ====================
" Config:
" ====================
let use_custom_theme=0
let use_truecolor=0
let use_dark_theme=1
let use_dark_gui_theme=1
let use_base16_theme=0
let use_theme_of_the_day=0
let use_random_theme=0
if use_dark_theme
    " Dark
    let use_terminal_bg_fg=0
    let use_white_term_bg=0 " TODO: Consolidate into one variable that sets both
    let use_term_bg=0
else
    " Light
    let use_terminal_bg_fg=0
    let use_white_term_bg=0 " TODO: Consolidate into one variable that sets both
    let use_term_bg=0
    let use_red_comments=0
endif
let use_white_gui_bg=0

" DARK:
let g:dark_theme='jellybeans'
" TRUECOLOR:
"let g:dark_theme_truecolor='twilight'
" LIGHT:
let g:light_theme='lucius'
" OTHER:
" Gui overrides (default to terminal if unset)
"let g:dark_gui_theme='twilight'
"let g:light_gui_theme='gruvbox'

"if $HOSTNAME == "legacy.os.hostname"
"    let use_custom_theme=0
"    let use_truecolor=0
"endif

" Extensions:
let g:polyglot_disabled = ['sensible']

" LUCIUS:
" 1 for transparent terminal bg
let g:lucius_no_term_bg=0
if ( !has("gui_running") && exists("use_dark_theme") && use_dark_theme ) || ( exists("use_dark_gui_theme") && use_dark_gui_theme )
    " DARK
    " low normal or high
    let g:lucius_contrast='normal'
    let g:lucius_contrast_bg='normal'
else
    " LIGHT
    let g:lucius_contrast='normal'
    let g:lucius_contrast_bg='high'
endif

" JELLYBEANS:
let jb_terminal_colors=0
let jb_twilight_colors=0

"let g:hybrid_custom_term_colors = 1 "Does nothing
"let g:gruvbox_termcolors=16

" Use the terminal themes if not set.
if !exists("g:dark_gui_theme")
    if exists("g:dark_theme_truecolor")
        let g:dark_gui_theme=g:dark_theme_truecolor
    else
        let g:dark_gui_theme=g:dark_theme
    endif
endif
if !exists("g:light_gui_theme")
    if exists("g:light_theme_truecolor")
        let g:light_gui_theme=g:light_theme_truecolor
    else
        let g:light_gui_theme=g:light_theme
    endif
endif

" ====================
" Settings:
" ====================
set nobackup                " Stop vim leaving backup ~ files everywhere.
set number                  " Enable linenumbers.
set numberwidth=3           " Enable linenumbers.
set hlsearch                " Enable search highlighting.
set ruler                   " Show some line/column information at bottom right.
set showcmd                 " Show current partially input command at bottom of screen.
set noshowmatch             " (SET TO OFF) Briefly jump to matching bracket.
set ignorecase              " Make searches not case sensitive when searching with / or ?.
set smartcase               " Except if they include one or more uppercase.
set wildmenu                " Show possible completions on tab.
set wildmode=longest:full   " Complete longest portion of compl. common to all, full compl. displ. in wildmenu
set incsearch               " Show search matches as you type them
"set foldcolumn=2            " Add an extra column width x left of linenrs to show fold locations
"set foldmethod=syntax       " Enable folds by language syntax, all buffers
set scrolloff=0             " Always keep N lines visible top/bottom of screen past cursor
set nocursorline            " Highlight line the cursor is currently on
set nocursorcolumn          " Highlight column the cursor is currently on
set norelativenumber        " Relative line numbers
if has("nvim")
    " This also exists for vim, but the undo file are not shared so we don't use them in order to
    " remove a source of confusion
    " They also save in different places by default
    " nvim in ~/.local/state/nvim/undo/"
    " vim in current working dir. set undodir to override
    set undofile
endif
" Printers:
" Enable linenumbers when printing, and equal margins on all sides (default 10,5,5,5).
if !has("nvim")
    set printoptions=number:y,left:5pc,right:5pc,top:5pc,bottom:5pc
endif
" Set printer device name, so that `:hardcopy` will work (calls terminal `$ lpr` so debug this if not working)
"set pdev=
" The printername we want is that used by `$ lpr -P printername`
" and available printers can be queried with `$ lpstat -p`
" see current default with `$ lpstat -d`
" set new default with `$ lpoptions -d printername`
" It does not need to be default if we specify ourselves in vim with `:set pdev=`

" Force utf8 encoding:
"set encoding=utf8
"set fileencoding=utf8

" Slow connections:
"set lazyredraw
"set nottyfast

" Splits
set splitright
set splitbelow
" Don't equalise vertical and horizontal splits, instead
" split/unsplit current window. Behaves more like tmux.
set equalalways!

" Tab settings.
set tabstop=4
set shiftwidth=4
set expandtab
"set smarttab

" Netrw.
" Open splits to be 75% of window size.
"let g:netrw_winsize=75

"" Show invisible characters
if has("win32")
    " TODO: Find alternative printable char.
    set nolist
elseif has("unix")
    set list
    "set listchars=tab:â€º\ ,space:â‹…,trail:Â¬,extends:Â»,precedes:Â«
    "set listchars=tab:ðŸ¡¢\ ,trail:â–•,extends:Â»,precedes:Â«
    set listchars=tab:Â»\ ,trail:â–•,extends:Â»,precedes:Â«
    "set listchars=tab:Â»\ ,trail:â–•,extends:Â»,precedes:Â«,space:â‹…
    "set listchars=tab:â–“â–’,trail:â–ˆ,extends:Â»,precedes:Â«
    "set listchars=tab:â–’â–‘,trail:â–’,extends:Â»,precedes:Â«
    ""eol:Â¬,
endif

" Indent settings. Detect filetype, or use auto & smart indent together.
set autoindent
filetype plugin indent on
"set smartindent
""set cindent

" Search for tags file in current directory, and recursively one level up until root
set tags=./tags;
" (To recursively generate ctags [C/C++] from current location ie. root of project: `$ ctags -R .`)

" Text width, auto word wrap. 0 off.
set tw=0
"set tw=100
" Default textwidth for markdown and text files.
"au BufRead,BufNewFile *.txt,*.md setlocal textwidth=80

" Disable highlighting until a search. Toggle with F12, or quick hide with ??.
let hlstate=0
"nnoremap <F12> :if (hlstate == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=1-hlstate <CR>
nnoremap ?? :noh<CR>

" Mintty change cursor style for insert
"let &t_ti.="\e[1 q"
"let &t_SI.="\e[5 q"
"let &t_EI.="\e[1 q"
"let &t_te.="\e[0 q"

" ====================
" Colours:
" ====================
"" Force 256 colour mode for xfce4-terminal
"if $TERM == 'xterm'
"    set t_Co=256
"endif

"" Truecolour vim inside certain tmux versions
"" Vim requires some extra hacks over neovim, disable this if it causes
"" problems:
"" Still need to check vim > 8.0 or we get issues with `t_8f`
"if use_truecolor && !has('nvim') && v:version >= 800
"    " You might have to force true color when using regular vim inside tmux as the
"    " colorscheme can appear to be grayscale with "termguicolors" option enabled.
"    if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
"      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"    endif
"endif

" Set truecolor mode for xterm & xfce4-terminal.
" May need to add the conditions below, but if tmux set up properly then TERM
" should be screen-256color now
" && $TERM == 'xterm-256color', defunct since we now use screen-256color
" && has('nvim'), enable for neovim only if our vim hack above doesn't work
if use_truecolor
    " If you have vim >=8.0 or Neovim >= 0.1.5
    " Also check t_Co >= 256, as any terminal without 256 colour is unlikely
    " to support it. This catches linux tty which otherwise became monochrome
    if ( (!has('nvim') && v:version >= 800) || has('nvim') ) && (has("termguicolors") && &t_Co >= 256)
        set termguicolors
        if exists("g:dark_theme_truecolor")
            let g:dark_theme=g:dark_theme_truecolor
        endif
    endif
endif

syntax on

" JELLYBEANS:
if exists("jb_terminal_colors") && jb_terminal_colors
    " Created to work with our jellybeans terminal theme (xfce4-terminal etc.)
    " and emulate truecolor GVim jellybeans.vim using the terminal ANSI colours
    " ANSI 0-15:
    " ColorPalette=#151515;#cf6a4c;#799d6a;#ffb964;#8197bf;#c6b6ee;#8fbfdc;#e8e8d3;#888888;#cf6a4c;#99ad6a;#fad07a;#8197bf;#c6b6ee;#8fbfdc;#adadad
    " --
    " BrightTermColours:
    " Remove storage class for more authentic jellybeans
    "\    'StorageClass': { '256ctermfg': '3' },
    "\    'StorageClass': { '256ctermfg': '136' },
    "\    'StorageClass': { '256ctermfg': '172' },
    "\    'StorageClass': { '256ctermfg': '173' },
    "\    'Visual': { '256ctermbg': '52' },
    "\    'SpecialKey': { '256ctermfg': '4', '256ctermbg': 'none', 'cterm': 'reverse' },
    let g:jellybeans_overrides = {
    \    'LineNr': { '256ctermfg': '8', '256ctermbg': 'none' },
    \    'Normal': { 'ctermfg': 'none', '256ctermfg': 'none', 'ctermbg': 'none', '256ctermbg': 'none' },
    \    'NonText': { 'ctermbg': 'none', '256ctermbg': 'none' },
    \    'Comment': { '256ctermfg': '8' },
    \    'Constant': { '256ctermfg': '9' },
    \    'Identifier': { '256ctermfg': '13' },
    \    'Statement': { '256ctermfg': '12' },
    \    'PreProc': { '256ctermfg': '14' },
    \    'Type': { '256ctermfg': '3' },
    \    'Special': { '256ctermfg': '2' },
    \    'Function': { '256ctermfg': '11' },
    \    'String': { '256ctermfg': '10' },
    \    'Structure': { '256ctermfg': '14' },
    \    'SpecialKey': { '256ctermbg': 'none', 'cterm': 'reverse' },
    \}
elseif exists("jb_twilight_colors") && jb_twilight_colors
    " As above, but for twilight.vim instead
    " Twilight:
    let g:jellybeans_overrides = {
    \    'Normal': { 'ctermbg': 'none', '256ctermbg': 'none', 'ctermfg': 'none', '256ctermfg': 'none' },
    \    'NonText': { 'ctermbg': 'none', '256ctermbg': 'none' },
    \    'Constant': { '256ctermfg': '1' },
    \    'Identifier': { '256ctermfg': '4' },
    \    'Statement': { '256ctermfg': '3' },
    \    'StorageClass': { '256ctermfg': '3' },
    \    'Operator': { '256ctermfg': '3' },
    \    'Structure': { '256ctermfg': '3' },
    \    'PreProc': { '256ctermfg': '4' },
    \    'Type': { '256ctermfg': '11' },
    \    'Directory': { '256ctermfg': '3' },
    \    'Special': { '256ctermfg': '10' },
    \    'Function': { '256ctermfg': '5' },
    \    'String': { '256ctermfg': '2' },
    \    'SpecialKey': { '256ctermfg': '4', '256ctermbg': '16', 'cterm': 'reverse' },
    \    'Visual': { '256ctermbg': '52' },
    \}
else
    " Fixes to normal theme
    let g:jellybeans_overrides = {
    \   'SpecialKey': { '256ctermfg': '239', '256ctermbg': '233' },
    \   'Search': { '256ctermbg': '16' },
    \}
endif

" Darkblue256:
" BlueBgBetterFg:
"\   'background': { '256ctermbg': '17' },
"\   'Normal': { 'guifg': 'eeeeee', 'ctermfg': 'none', '256ctermfg': '255', '256ctermbg': '17' },
" Transparent:
let g:darkblue256_overrides = {
\   'background': { 'ctermbg': 'none', '256ctermbg': 'none', 'guibg': 'none' },
\   'Normal': { 'guifg': 'none', 'guibg': 'none', 'ctermfg': 'none', '256ctermfg': 'none', 'ctermbg': 'none', '256ctermbg': 'none' },
\   'Todo': { 'guifg': 'ffffff', '256ctermfg': '231' },
\   'Visual': { 'guifg': 'ffffff', '256ctermfg': '231' },
\}

" Override colorscheme diff highlighting.
function! SetCustomDiff(use_dark_theme)
    if !has("gui_running") && ( $TERM == 'linux' || $TERM == 'cygwin' || &t_Co < 256 )
        "" Restore default diff.
        "hi DiffAdd      ctermfg=NONE   ctermbg=1   cterm=NONE   term=bold
        "hi DiffDelete   ctermfg=4      ctermbg=6   cterm=bold   term=bold
        "hi DiffChange   ctermfg=NONE   ctermbg=5   cterm=NONE   term=bold
        "hi DiffText     ctermfg=NONE   ctermbg=1   cterm=bold   term=reverse
        " A better 16 color custom diff:
        hi DiffAdd      ctermfg=7   ctermbg=1   cterm=NONE   term=bold
        hi DiffDelete   ctermfg=0   ctermbg=5   cterm=NONE   term=bold
        hi DiffChange   ctermfg=7   ctermbg=4   cterm=NONE   term=bold
        hi DiffText     ctermfg=7   ctermbg=1   cterm=NONE   term=reverse
    elseif !a:use_dark_theme
        hi DiffAdd      guifg=NONE      guibg=#D7FFAF   ctermfg=NONE   ctermbg=193   gui=NONE   cterm=NONE
        hi DiffDelete   guifg=#000000   guibg=#FFD7FF   ctermfg=16     ctermbg=225   gui=NONE   cterm=NONE
        hi DiffChange   guifg=NONE      guibg=#AFFFFF   ctermfg=NONE   ctermbg=159   gui=NONE   cterm=NONE
        hi DiffText     guifg=#000000   guibg=#D7D7FF   ctermfg=16     ctermbg=189   gui=NONE   cterm=NONE
    else
        " Jellybeans:
        hi DiffAdd      guifg=#D2EBBE   guibg=#437019   ctermfg=193   ctermbg=22   gui=NONE      cterm=NONE
        "hi DiffDelete   guifg=#40000A   guibg=#700009   ctermfg=16    ctermbg=52   gui=NONE      cterm=NONE
        hi DiffDelete   guifg=#40000A   guibg=#700009   ctermfg=232   ctermbg=52   gui=NONE      cterm=NONE
        hi DiffChange   guifg=#FFFFFF   guibg=#2B5B77   ctermfg=231   ctermbg=24   gui=NONE      cterm=NONE
        "hi DiffText     guifg=#8fbfdc   guibg=#000000   ctermfg=81    ctermbg=16   gui=reverse   cterm=reverse
        hi DiffText     guifg=#8fbfdc   guibg=#000000   ctermfg=81    ctermbg=232  gui=reverse   cterm=reverse
    endif
endfunction

" Apply default theme with fixes.
function! ApplyEnhancedDefaultTheme(use_dark_theme)
    " Force all colours to be from terminal colourscheme.
    "set t_Co=16

    " Apply default theme and tweak.
    color default
    if a:use_dark_theme
        set background=dark

        " Take some minor alterations from default-enhanced where they are
        " fixes but not theme alterations
        "hi Search ctermfg=0 ctermbg=14 cterm=NONE guibg=Orange
        hi Search ctermfg=0 ctermbg=10 cterm=NONE guibg=Orange
        hi IncSearch ctermfg=0 ctermbg=13 cterm=NONE guifg=#000000 guibg=#60ff60 gui=NONE
        hi PMenu ctermfg=7 ctermbg=8 guifg=#f0f0f0 guibg=#404080
        hi PMenuSel ctermfg=0 ctermbg=7 guifg=#f0f0f0 guibg=#2050d0
        "hi Visual ctermfg=231 ctermbg=105 guifg=#ffffff guibg=#8080ff
        "hi Visual ctermfg=NONE ctermbg=52
        hi MatchParen ctermfg=231 ctermbg=60
        " Diff
        hi! link diffAdded Type
        hi! link diffFile Identifier
        hi! link diffRemoved Constant
    else
        set background=light
    endif
endfunction

" Apply custom diff whenever a colorscheme is applied.
autocmd ColorScheme * call SetCustomDiff((has("gui_running") && use_dark_gui_theme)
            \ || (!has("gui_running") && use_dark_theme))
" Make transparent to terminal bg/fg colours whenever colorscheme applied.
                "\ hi LineNr ctermbg=NONE guibg=NONE |
if exists("use_terminal_bg_fg") && use_terminal_bg_fg && !has("gui_running")
    autocmd ColorScheme * hi Normal ctermfg=NONE ctermbg=NONE guifg=NONE guibg=NONE |
                \ hi NonText ctermbg=NONE guibg=NONE |
                \ hi SpecialKey ctermbg=NONE guibg=NONE
endif

if exists("use_white_term_bg")
            \ && use_white_term_bg
            \ && !has("gui_running")
            \ && exists("use_dark_theme")
            \ && !use_dark_theme
    autocmd ColorScheme * hi Normal ctermbg=231 guibg=#ffffff
endif
if exists("use_term_bg")
            \ && use_term_bg
            \ && !has("gui_running")
    autocmd ColorScheme * hi Normal ctermbg=NONE
endif
if exists("use_white_gui_bg")
            \ && use_white_gui_bg
            \ && has("gui_running")
            \ && exists("use_dark_gui_theme")
            \ && !use_dark_gui_theme
    autocmd ColorScheme * hi Normal guibg=#FFFFFF
endif
" Red comments
if exists("use_red_comments")
            \ && use_red_comments
    autocmd ColorScheme * hi Comment ctermfg=124 guifg=#AF0000
    " 124:#af0000 is the lucius.vim red for light bg
endif

" Always make comments ctermfg 108 (zenburn.vim green comments)
"autocmd ColorScheme lucius hi Comment ctermfg=108
"autocmd ColorScheme lucius hi Comment ctermfg=108 || hi constant ctermfg=217 || hi string ctermfg=187
"autocmd ColorScheme jellybeans hi Comment ctermfg=65

" Default is a dim grey, 'Grey80'
" 255 = #eeeeee, 231 = #ffffff
autocmd ColorScheme torte hi Normal guifg=#f8f8f8 ctermfg=255

" DefaultEnhanced:
" Transparent fg/bg
"autocmd ColorScheme default-enhanced hi Normal guifg=NONE guibg=NONE

" Darkblue256:
"autocmd ColorScheme darkblue256 hi Normal guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE | hi LineNr guibg=NONE ctermbg=NONE

" Twilight:
" Jellybeans Normal hi Normal guifg=#e8e8d3 |
" Brighter Comment, 808080 (grey), 9f8f7f (reddish **958f7f** bit more subtle), 7f9f8f (blueish(greenish))
" Ideas from Jellybeans overrides: 959288
autocmd ColorScheme twilight hi Comment guifg=#958f7f | hi Normal guifg=#e8e8d3 | hi SpecialKey guifg=#444444 guibg=#212121

"" Dracula:
"" Use brighter magenta from term
"" Use brighter Comment
"" TODO: Loads of linked DraculaPink not covered by this...
"autocmd ColorScheme dracula hi Statement guifg=#FF92D0 |
"            \ hi PreProc guifg=#FF92D0 |
"            \ hi Comment guifg=#8787af
autocmd ColorScheme dracula hi Comment guifg=#8787af

" Nord:
"" Use brighter Comment
" #707090
" #708090
" #808090
autocmd ColorScheme nord hi Comment guifg=#808090

" TODO: Many of these cterm=NONE may have been the result of a misconfigured terminal
" and able to be removed now? Italic was being mapped to REVERSE somehow
" Some may be genuine italics we want to remove
" Could be the vim truecolor "hack" section which is applied vim versions >=
" 800 and may not longer be needed? (or a quirk of tmux sessions?)

" Desert:
"autocmd ColorScheme desert hi Identifier cterm=NONE
autocmd ColorScheme desert hi Pmenu      ctermfg=231 ctermbg=240 guifg=#ffffff guibg=#606060 |
            \ hi PmenuSel   ctermfg=232 ctermbg=254 guifg=#101010 guibg=#eeeeee |
            \ hi PmenuSbar  ctermbg=248 guibg=Grey |
            \ hi PmenuThumb ctermbg=15 guibg=White |
            \ hi Identifier gui=NONE cterm=NONE

" Material:
" Original comment, guifg=#5D818E
autocmd ColorScheme vim-material hi Comment cterm=NONE guifg=#6D91A0 |
            \ hi Search guifg=#000000 guibg=#50FA7B cterm=NONE

" NightOwl:
autocmd ColorScheme night-owl hi Comment cterm=NONE

" NonText (whitespace etc.) fixes:
autocmd ColorScheme desert,default-enhanced hi NonText guibg=NONE ctermfg=60 guifg=#5f5f87
autocmd ColorScheme wombat256mod hi NonText guibg=NONE ctermfg=241 guifg=#857b6f gui=NONE | hi Comment gui=NONE
autocmd ColorScheme twilight hi NonText guibg=NONE gui=bold
autocmd ColorScheme evening hi NonText guibg=NONE
autocmd ColorScheme twilight256 hi NonText guifg=#505050 gui=NONE

autocmd ColorScheme evening hi Statement cterm=NONE gui=NONE | hi Type cterm=NONE gui=NONE | hi Identifier gui=NONE cterm=NONE
" Neovim 'legacy' vim theme is like darkblue256
autocmd ColorScheme vim hi Statement cterm=NONE gui=NONE | hi Type cterm=NONE gui=NONE

" Old fixes from dotfiles
" Jellybeans Normal fg: guifg=#e8e8d3
" Alt const. from wombat256mod #e5786d
autocmd ColorScheme twilight256 hi Normal guifg=#e0e0e0 guibg=#212121 ctermfg=188 ctermbg=234 |
            \ hi Function ctermfg=139 guifg=#a999ac |
            \ hi Comment ctermfg=245 guifg=#949494 |
            \ hi Constant ctermfg=173 guifg=#d08356 |
            \ hi FoldColumn ctermfg=180 ctermbg=238 guifg=#d2b48c guibg=#4d4d4d |
            \ hi Folded ctermfg=220 ctermbg=238 guifg=#ffd700 guibg=#4d4d4d |
            \ hi Statement gui=NONE cterm=NONE |
            \ hi Type guifg=#e3d796 gui=NONE cterm=NONE |
            \ hi MatchParen cterm=reverse ctermbg=16 gui=reverse guibg=#000000

" Search from jellybeans
autocmd ColorScheme ir_dark,ir_blue,ir_black hi NonText guifg=#605550 | hi Search cterm=underline ctermfg=0 ctermbg=16 gui=underline guifg=#f0a0c0 guibg=#302028

" murphy-like green fg for default-enhanced
"autocmd ColorScheme default-enhanced hi Normal guifg=#87ff87 guibg=#303030 | hi Type guifg=#ffffff

" More legible comments
" TODO: Pick a NonText colour to use for every theme?
" Like #606090 used for cobalt2, or the other blue/grey colours in
" this file. Desert override also good
autocmd ColorScheme slate hi Comment guifg=#8a8a8a ctermfg=245 | hi NonText guifg=#606060 guibg=NONE
autocmd ColorScheme Mustang hi NonText guifg=#606060 guibg=NONE

" Cobalt2 fixing Search highlight, IncSearch already green
" NonText needs fixing too, to #606090 (randomly chosen pale grey/blue)
" Comments originally #0088ff, to darkblue.vim comment #80A0FF (same as vscode settings)
"autocmd ColorScheme cobalt2 hi Search ctermfg=123 ctermbg=26 guifg=#90fff0 guibg=#2050d0 gui=NONE | hi NonText guifg=#606090 guibg=NONE | hi Comment guifg=#80A0FF
" Just Search,NonText
autocmd ColorScheme cobalt2 hi Search ctermfg=123 ctermbg=26 guifg=#90fff0 guibg=#2050d0 gui=NONE | hi NonText guifg=#606090 guibg=NONE

"" PaperColor:
let g:PaperColor_Theme_Options = {
\    'theme': {
\        'default.light': {
\            'override': {
\                'color00': ['#ffffff', '231'],
\                'cursor_fg': ['#ffffff', '231']
\            }
\        }
\    }
\}

"autocmd ColorScheme lucius hi Constant ctermfg=186

" Dracula:
let g:dracula_italic=0
let g:dracula_colorterm=1 " 0 = Transparent terminal bg.

"" Nofrils:
let g:nofrils_strbackgrounds=1
let g:nofrils_heavycomments=1
let g:nofrils_heavylinenumbers=1

"let g:zenburn_high_Contrast=1
"let g:zenburn_transparent=1
let g:zenburn_old_Visual=1
"let g:zenburn_alternate_Visual=1
"let g:zenburn_alternate_Error = 1
"let g:zenburn_alternate_Include = 1

"let g:solarized_termcolors=256

let g:jellybeans_use_gui_italics = 0
let g:twilight_term_use_gui_italics = 0
let g:gruvbox_italic = 0

"let g:gruvbox_contrast_light='soft'
"let g:gruvbox_contrast_light='medium'
"let g:gruvbox_contrast_light='hard'
"let g:gruvbox_contrast_light='white'
"let g:gruvbox_contrast_light='solarized'

"let g:gruvbox_contrast_dark='soft'
"let g:gruvbox_contrast_dark='medium'
"let g:gruvbox_contrast_dark='hard'

let g:gruvbox_material_background = 'hard'
let g:vem_colors_italic = 0

let g:seoul256_background=237
let g:seoul256_light_background=256

" Molokai:
let g:molokai_original=1
let g:rehash256=1
" Default comment is #75715E
" VS Code - #898470
" Code (mine) - #a09580, (a09080, 908070 also good)
" = Search and IncSearch direct from Dracula =
" hi Search cterm=reverse ctermfg=84 ctermbg=NONE gui=reverse guifg=#50FA7B guibg=NONE
" hi IncSearch ctermfg=236 ctermbg=215 guifg=#282A36 guibg=#FFB86C cterm=NONE gui=NONE
" We have inverted Search and IncSearch, leaving Search default molokai
" Alternative search highlight using dracula orange bg:
"autocmd ColorScheme molokai hi Comment guifg=#a09080 | hi IncSearch cterm=reverse ctermfg=84 ctermbg=NONE gui=reverse guifg=#50FA7B guibg=NONE | hi Search ctermbg=215 guibg=#FFB86C
" Another, using molokai green and orange this time
autocmd ColorScheme molokai hi Comment guifg=#a09080 | hi IncSearch cterm=reverse ctermbg=NONE gui=reverse guibg=NONE ctermfg=154 guifg=#A6E22E | hi Search ctermfg=16 guifg=#000000 ctermbg=208 guibg=#FD971F | hi MatchParen cterm=bold,underline gui=bold,underline guifg=#FD971F guibg=#000000
" Or molokai pink and purple
"autocmd ColorScheme molokai hi Comment guifg=#a09080 | hi IncSearch cterm=reverse ctermbg=NONE gui=reverse guibg=NONE ctermfg=197 guifg=#F92672 | hi Search ctermfg=16 guifg=#000000 ctermbg=141 guibg=#AE81FF

" Monokai:
" Default comment is #75715E, same as molokai.vim
autocmd ColorScheme monokai hi Comment guifg=#898470 | hi IncSearch cterm=reverse ctermbg=NONE gui=reverse guibg=NONE ctermfg=154 guifg=#A6E22E | hi Search ctermfg=16 guifg=#000000 ctermbg=208 guibg=#FD971F
"autocmd ColorScheme monokai hi Comment guifg=#a09080 | hi IncSearch cterm=reverse ctermbg=NONE gui=reverse guibg=NONE ctermfg=154 guifg=#A6E22E

" Sonokai:
let g:sonokai_style='default'
"let g:sonokai_style='shusia'
"let g:sonokai_style='espresso'

" If using a base16 theme that also reassigns colours 16-21.
let base16colorspace=256
" base16_shell_path will apply the terminal shell script on vim colorchange
"let g:base16_shell_path='~/repos/dotfiles/base16/sh'

" Fix the default built-in darkblue.vim theme foreground text
" Default darkblue.vim is c0c0c0
" 231 = ffffff
" 255 = eeeeee
" 254 = e4e4e4
" 253 = dadada
" 252 = d0d0d0
" And take MatchParen from jellybeans.vim so cursor doesn't disappear over opening
" paren: hi MatchParen cterm=bold ctermbg=6 gui=bold guifg=#ffffff guibg=#556779
"autocmd ColorScheme darkblue hi Normal guifg=#e4e4e4 ctermfg=254 | hi MatchParen cterm=bold ctermbg=6 gui=bold guifg=#ffffff guibg=#556779
"autocmd ColorScheme darkblue hi Normal guifg=#eeeeee ctermfg=255 | hi MatchParen cterm=bold ctermbg=6 gui=bold guifg=#ffffff guibg=#556779
autocmd ColorScheme darkblue hi MatchParen cterm=bold ctermbg=6 gui=bold guifg=#ffffff guibg=#556779
"autocmd ColorScheme darkblue hi Normal guifg=#ffffff ctermfg=231 | hi MatchParen cterm=bold ctermbg=6 gui=bold guifg=#ffffff guibg=#556779
" Or transparent
"autocmd ColorScheme darkblue hi Normal guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE | hi LineNr guibg=NONE ctermbg=NONE | hi MatchParen cterm=bold ctermbg=6 gui=bold guifg=#ffffff guibg=#556779

function! SetCustomScheme(use_dark)
    if has("gui_running")
        if a:use_dark
            set background=dark
            execute 'colorscheme ' . g:dark_gui_theme
        else
            set background=light
            execute 'colorscheme ' . g:light_gui_theme
        endif
    else
        if a:use_dark
            set background=dark
            execute 'colorscheme ' . g:dark_theme
        else
            set background=light
            execute 'colorscheme ' . g:light_theme
        endif
    endif
endfunction

" Set the colourscheme.
if !has("gui_running") && ( $TERM == 'linux' || $TERM == 'cygwin' )
    " Fall back to supported dark theme if in tty or cygwin.
    call ApplyEnhancedDefaultTheme(1)
else
    " Set a colourful 256 / gui theme if possible.
    if exists("use_custom_theme") && use_custom_theme && ( has("gui_running") || &t_Co == 256 )
        if use_base16_theme
            color base16-eighties
        elseif has("gui_running") && exists("use_dark_gui_theme")
            call SetCustomScheme(use_dark_gui_theme)
        else
            call SetCustomScheme(use_dark_theme)
        endif
    else
        if has("gui_running")
            if exists("use_dark_gui_theme") && use_dark_gui_theme
                color darkblue
            else
                color default
                set background=light
            endif
        else
            if exists("use_dark_theme")
                call ApplyEnhancedDefaultTheme(use_dark_theme)
            else
                call ApplyEnhancedDefaultTheme(0)
            endif
        endif
    endif
endif

" ====================
" Gvim:
" ====================
if has("gui_running") && !has("nvim")
    " Disable mouse
    set mouse=c
    " Or enable mouse.
    "set mouse=a

    " Disable all cursor blinking:
    set guicursor+=a:blinkon0

    if has("win32")
        " Set font for MS Windows
        set guifont=Consolas:h11
        "set guifont=Courier:h12
        "set guifont=Courier10\ BT:h11
        "set guifont=Terminus:h12
        "set guifont=Hack:h10
        "set guifont=Anonymous_Pro:h11
    elseif has("unix")
        " Or for Linux / Cygwin
        set guifont=Monospace\ 10
        "set guifont=DejaVu\ Sans\ Mono\ 10
        "set guifont=Liberation\ Mono\ 10
        "set guifont=Terminus\ 12
        "set guifont=Hack\ 10
        "set guifont=Hack\ 13
        "set guifont=Source\ Code\ Pro\ 10
        "set guifont=Noto\ Mono\ 10
        "set guifont=Inconsolata\ 10
        "set guifont=IBM\ Plex\ Mono\ 10
    endif

    " Window size
    "set lines=40 columns=115
    set lines=45 columns=130
    "set lines=48 columns=150

    "" Maximise window for MS Windows
    "if has("win32")
    "    au GUIEnter * simalt ~x
    "endif

    set guioptions-=m  " Remove menu bar
    set guioptions-=T  " Remove toolbar
    set guioptions-=r  " Remove right-hand scroll bar
    set guioptions-=L  " Remove left-hand scroll bar
    if exists("use_dark_gui_theme") && use_dark_gui_theme
        set guioptions+=d  " Dark gtk+ gui theme
    else
        set guioptions-=d  " Light gtk+ gui theme
    endif
    set guioptions-=e  " Remove GUI tabs, for terminal style
endif

" ====================
" Random colourscheme:
" colarray
" ====================
" Need extra conditions here to check we are actually truecolor capable, in case we fall back on older vim like CentOS 7. Rather than just if it's desired
if has("gui_running") || ( exists("use_truecolor") && use_truecolor && ( (!has('nvim') && v:version >= 800) || has('nvim') ) && (has("termguicolors") && &t_Co >= 256) )
    " ==================== GUI Light ====================
    "let g:schemes_light = [ 'lucius', 'default-enhanced', 'gruvbox', 'solarized8', 'solarized8_high', 'zellner', 'summerfruit256', 'hybrid', 'hybrid-light', 'hybrid-bright', 'hemisu', ]
    let g:schemes_light = [ 'lucius', 'hybrid-light', 'default-enhanced', 'one', 'gruvbox', 'solarized8', ]
    " ==================== GUI Dark ====================
    "let g:schemes_dark = [ 'jellybeans', 'wombat256mod', 'molokai', 'monokai', 'darkblue', 'darkblue256', 'default-enhanced', 'desert', 'lucius', 'twilight', 'zenburn', 'dracula', 'gruvbox', ]
    let g:schemes_dark = [ 'jellybeans',
                \ 'jellybeans-nvim',
                \ 'wombat256mod',
                \ 'twilight',
                \ 'darkblue',
                \ 'hybrid',
                \ 'vilight',
                \ 'twilight256',
                \ 'sonokai',
                \ 'dracula',
                \ 'dracula-soft',
                \ 'monokai',
                \ 'molokai',
                \ 'gruvbox',
                \ 'retrobox',
                \ 'slate',
                \ 'desert',
                \ 'vim',
                \ 'evening',
                \ 'lucius',
                \ 'onedark',
                \ 'one',
                \ 'solarized8',
                \ 'everforest',
                \ 'gruvbox-material',
                \ 'habamax',
                \ 'wildcharm',
                \ 'zaibatsu',
                \ 'elflord',
                \ 'murphy',
                \ 'default-enhanced',
                \ 'darkblue256',
                \ 'default',
                \ 'torte',
                \ 'catppuccin-macchiato',
                \ 'catppuccin-frappe',
                \ 'catppuccin-mocha',
                \ 'tokyonight-moon',
                \ 'tokyonight-storm',
                \ 'tokyonight-night',
                \ 'iceberg',
                \ 'nord',
                \ 'zenburn',
                \ 'Tomorrow-Night',
                \ 'Tomorrow-Night-Eighties',
                \ 'Tomorrow-Night-Blue',
                \ 'cobalt2',
                \ 'nofrils-dark',
                \ 'vim-material',
                \ 'jellybeans-bright',
                \ 'triplejelly',
                \ 'night-owl',
                \ 'ir_dark',
                \ 'ir_black',
                \ 'ir_blue',
                \ 'shades_of_purple',
                \ 'badwolf',
                \ 'simple-green',
                \ 'simple-orange',
                \ 'hemisu',
                \ 'codedark',
                \ 'github_dark_default',
                \ 'apprentice',
                \ 'blackboard',
                \ 'lucario',
                \ 'seoul256',
                \ 'seoul8',
                \ 'base16-eighties',
                \ 'Mustang',
                \ 'bespin',
                \ ]
    " Curated:
    " First n+1 elements
    let g:schemes_dark = g:schemes_dark[0:47]
else
    " ==================== Term Light ====================
    let g:schemes_light = [ 'gruvbox', 'lucius', 'seoul256-light' ]
    " ==================== Term Dark ====================
    "let g:schemes_dark = [ 'darkblue256', 'desert256', 'dracula', 'gruvbox', 'iceberg', 'jellybeans', 'lucius', 'seoul256', 'triplejelly', 'twilight256', 'wombat256mod', 'xoria256', 'zenburn' ]
    let g:schemes_dark = [ 'jellybeans', 'wombat256mod', 'twilight256', 'slate', 'darkblue', 'default-enhanced', 'darkblue256', 'cobalt2', 'desert256', 'molokai', 'monokai', 'lucius', 'dracula', 'gruvbox', 'zenburn', 'murphy', 'evening', 'triplejelly', 'hybrid', 'inkpot', 'iceberg', 'nofrils-dark', 'badwolf', 'xoria256', ]
endif
if use_dark_theme
    let g:schemes_random = g:schemes_dark
else
    let g:schemes_random = g:schemes_light
endif

function! RandomiseTheme(schemes)
    let seconds = str2nr(strftime('%S'))
    call RandomiseThemeByNumber(seconds, a:schemes)
endfunction

function! RandomiseThemeByDay(schemes)
    if has("win32")
        let day = str2nr(strftime('%d'))
    elseif has ("unix")
        let day = str2nr(system("date +\%j"))
    endif
    call RandomiseThemeByNumber(day, a:schemes)
endfunction

function! RandomiseThemeByNumber(num, schemes)
    let scheme = a:schemes[a:num % len(a:schemes)]
    execute 'colorscheme ' . scheme
    "" Print resulting theme after open.
    echom 'Utilising colourscheme: "' . scheme . '"'
endfunction

" Colour mappings:
" Toggle background setting
noremap <F6> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
" Reset to default theme
if use_dark_theme
    "noremap <F7> :call ApplyEnhancedDefaultTheme(1)<CR>
    noremap <Leader><F6> :set notermguicolors<CR>:set t_Co=16<CR>:colorscheme default<CR>:set background=dark<CR>
else
    "noremap <F7> :call ApplyEnhancedDefaultTheme(0)<CR>
    noremap <Leader><F6> :set notermguicolors<CR>:set t_Co=16<CR>:colorscheme default<CR>:set background=light<CR>
endif
" Apply transparency to any theme
noremap <F7> :hi Normal ctermfg=NONE ctermbg=NONE guifg=NONE guibg=NONE<CR>
noremap <Leader><F7> :hi Normal ctermfg=NONE guifg=NONE<CR>
" Apply base16 theme
noremap <F11> :colorscheme base16-eighties<CR>
" Regular light/dark
noremap <F9> :set background=dark<CR>:execute 'colorscheme ' . g:schemes_dark[0]<CR>
noremap <F10> :call SetCustomScheme(1)<CR>
" Random light/dark
"noremap <Leader><F7> :set background=dark<CR>:call RandomiseTheme(g:schemes_dark)<CR>
"noremap <Leader><F8> :set background=light<CR>:call RandomiseTheme(g:schemes_light)<CR>
" Daily light/dark
noremap <Leader><F9> :set background=dark<CR>:call RandomiseThemeByDay(g:schemes_dark)<CR>
noremap <Leader><F10> :set background=light<CR>:call RandomiseThemeByDay(g:schemes_light)<CR>

noremap <F12> :set notermguicolors<CR>:set t_Co=256<CR>:set bg=dark<CR>:color default-enhanced<CR>
noremap <Leader><F12> :set termguicolors<CR>:set t_Co=256<CR>:set background=dark<CR>:execute 'colorscheme ' . g:schemes_dark[0]<CR>

" Choose a random theme on startup, if requested and supported.
if exists("use_custom_theme")
            \ && use_custom_theme
            \ && ( has("gui_running")
            \ || ( $TERM != 'linux' && $TERM != 'cygwin' && &t_Co == 256 ) )
    if exists("use_random_theme") && use_random_theme
        if exists("use_dark_theme") && use_dark_theme
            if exists("use_terminal_bg_fg") && use_terminal_bg_fg && !has("gui_running")
                autocmd VimEnter * nested set background=dark |
                            \ call RandomiseTheme(g:schemes_dark) |
                            \ call SetCustomDiff(use_dark_theme) |
                            \ hi Normal ctermfg=NONE ctermbg=NONE guifg=NONE guibg=NONE |
                            \ hi SpecialKey ctermbg=NONE guibg=NONE
                            "\ hi LineNr ctermbg=NONE guibg=NONE |
            else
                autocmd VimEnter * nested set background=dark |
                            \ call RandomiseTheme(g:schemes_dark) |
                            \ call SetCustomDiff(use_dark_theme)
            endif
        else
            if exists("use_terminal_bg_fg") && use_terminal_bg_fg && !has("gui_running")
                autocmd VimEnter * nested set background=light |
                            \ call RandomiseTheme(g:schemes_light) |
                            \ call SetCustomDiff(use_dark_theme) |
                            \ hi Normal ctermfg=NONE ctermbg=NONE guifg=NONE guibg=NONE
                            "\ hi LineNr ctermbg=NONE guibg=NONE
            elseif exists("use_white_term_bg") && use_white_term_bg
                autocmd VimEnter * nested set background=light |
                            \ call RandomiseTheme(g:schemes_light) |
                            \ call SetCustomDiff(use_dark_theme) |
                            \ hi Normal ctermbg=231 guibg=#ffffff
            else
                autocmd VimEnter * nested set background=light |
                            \ call RandomiseTheme(g:schemes_light) |
                            \ call SetCustomDiff(use_dark_theme)
            endif
        endif
    elseif exists("use_theme_of_the_day") && use_theme_of_the_day
        if ( has("gui_running")
                    \ && exists("use_dark_gui_theme")
                    \ && use_dark_gui_theme )
                    \ || ( !has("gui_running")
                    \ && exists("use_dark_theme")
                    \ && use_dark_theme )
            if exists("use_terminal_bg_fg") && use_terminal_bg_fg && !has("gui_running")
                autocmd VimEnter * nested set background=dark |
                            \ call RandomiseThemeByDay(g:schemes_dark) |
                            \ call SetCustomDiff(use_dark_theme) |
                            \ hi Normal ctermfg=NONE ctermbg=NONE guifg=NONE guibg=NONE |
                            \ hi SpecialKey ctermbg=NONE guibg=NONE
                            "\ hi LineNr ctermbg=NONE guibg=NONE |
            else
                autocmd VimEnter * nested set background=dark |
                            \ call RandomiseThemeByDay(g:schemes_dark) |
                            \ call SetCustomDiff(use_dark_theme)
            endif
        else
            if exists("use_terminal_bg_fg") && use_terminal_bg_fg && !has("gui_running")
                autocmd VimEnter * nested set background=light |
                            \ call RandomiseThemeByDay(g:schemes_light) |
                            \ call SetCustomDiff(use_dark_theme) |
                            \ hi Normal ctermfg=NONE ctermbg=NONE guifg=NONE guibg=NONE
                            "\ hi LineNr ctermbg=NONE guibg=NONE
            elseif exists("use_white_term_bg") && use_white_term_bg
                autocmd VimEnter * nested set background=light |
                            \ call RandomiseThemeByDay(g:schemes_light) |
                            \ call SetCustomDiff(use_dark_theme) |
                            \ hi Normal ctermbg=231 guibg=#ffffff
            else
                autocmd VimEnter * nested set background=light |
                            \ call RandomiseThemeByDay(g:schemes_light) |
                            \ call SetCustomDiff(use_dark_theme)
            endif
        endif
    endif
endif

" ====================
" Mappings:
" ====================
" Disable middle mouse
noremap <MiddleMouse> <Nop>
inoremap <MiddleMouse> <Nop>
noremap <2-MiddleMouse> <Nop>
inoremap <2-MiddleMouse> <Nop>
noremap <3-MiddleMouse> <Nop>
inoremap <3-MiddleMouse> <Nop>
noremap <4-MiddleMouse> <Nop>
inoremap <4-MiddleMouse> <Nop>

" Scrolling
nnoremap <Up> zH
nnoremap <Down> zL
nnoremap <Left> zh
nnoremap <Right> zl
nnoremap <Space> <C-F>
inoremap <Up> <C-o>zt
inoremap <Down> <C-o>zb
inoremap <Left> <C-o>zz
inoremap <Right> <C-o>

" And scroll (centre content) when examining diffs
nnoremap ]c ]czz
nnoremap [c [czz

" Toggle folds with Tab (like Doom Emacs)
" By default, tab just imitates <C-I>
" TODO: Disabled, because this actually overrules the Forward jump
"nnoremap <Tab> za
" Enable folding by syntax and the sidebar
nnoremap <Leader>ff :setlocal foldmethod=syntax foldcolumn=2 \| normal zR<CR>
nnoremap <Leader>fm :setlocal foldmethod=manual foldcolumn=2 \| normal zR<CR>
" TODO: HOW TO STOP FOLDING (this just hides them, like zi)
nnoremap <Leader>fs :set nofoldenable \| set foldcolumn=0<CR>
"| normal zR

"nnoremap <Space> <Nop>
"let mapleader=" "
noremap \\ <Leader>
noremap <Leader>y "+y
noremap <Leader>Y "+y$
"noremap <Leader>d "+d
"noremap <Leader>D "+D
"noremap <Leader>x "+x
"noremap <Leader>X "+X
"noremap <Leader>c "+c
"noremap <Leader>C "+C
"noremap <Leader>s "+s
"noremap <Leader>S "+S
noremap <Leader>p "+p
noremap <Leader>P "+P

nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :qa<CR>
nnoremap <Leader>x :wq<CR>

nnoremap <Leader>s :Vex<CR>
nnoremap <Leader>v :vnew<CR>
nnoremap <Leader>e :Ex<CR>

nnoremap <Leader>da :windo diffthis<CR><C-W>w
nnoremap <Leader>dh :diffthis<CR><C-W>h:diffthis<CR><C-W>l
nnoremap <Leader>dl :diffthis<CR><C-W>l:diffthis<CR><C-W>h
nnoremap <Leader>dj :diffthis<CR><C-W>j:diffthis<CR><C-W>k
nnoremap <Leader>dk :diffthis<CR><C-W>k:diffthis<CR><C-W>j
nnoremap <Leader>dd :diffthis<CR><C-W>w:diffthis<CR><C-W>W
nnoremap <Leader>dt :diffthis<CR>
nnoremap <Leader>do :diffoff<CR>
nnoremap <Leader>ds :windo diffoff<CR><C-W>w
nnoremap <Leader>dr :windo diffoff<CR>:windo diffthis<CR><C-W>w
nnoremap <Leader>D :diffoff<CR><C-W>w:diffoff<CR><C-w>W

nnoremap <Leader>o o<ESC>o
nnoremap <Leader>O O<ESC>O
nnoremap <Leader><CR> o<ESC>o<ESC>O

nnoremap <Leader>h 5h
nnoremap <Leader>j 5j
nnoremap <Leader>k 5k
nnoremap <Leader>l 5l

"nnoremap <Leader>c o// 
"nnoremap <Leader>C O// 
nnoremap <Leader>t o// TODO: 
nnoremap <Leader>T O// TODO: 

"nnoremap <Leader>s i <ESC>r
"nnoremap <Leader>S a <ESC>r
"nnoremap <Leader>i i <ESC>r
"nnoremap <Leader>a a <ESC>r

"nnoremap <Leader>m :tabe $MYVIMRC<CR>
" Hardcode it because neovim takes us to its own config file instead but we
" want this file
nnoremap <Leader>m :tabe ~/.vimrc<CR>
nnoremap <Leader>i :set paste!<CR>
nnoremap <Leader>n :set number! \| set list!<CR>
nnoremap <Leader>u yypVr-
nnoremap <Leader>U yypVr=

nnoremap <Leader>M :set modifiable!<CR>
nnoremap <Leader>R :set readonly!<CR>

nnoremap <Leader>g :vimgrep ""g **<Left><Left><Left><Left><Left>
cnoremap <Leader>g vimgrep ""g **<Left><Left><Left><Left><Left>
"cnoremap vimm vimgrep ""g `git ls-files src`<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
" Try to make agnostic to location (assumes searching current location ie. that you `cd dev/`, `cd src/` first)
cnoremap vimm vimgrep ""g `git ls-files .`<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
cnoremap vims vimgrep ""g src/**<Left><Left><Left><Left><Left><Left><Left><Left><Left>
cnoremap vimd vimgrep ""g dev/**<Left><Left><Left><Left><Left><Left><Left><Left><Left>
cnoremap vimg vimgrep ""g **<Left><Left><Left><Left><Left>
" Don't include .exe and other build files in vimgrep results, also affects filepath completion stuff
"set wildignore+=*.exe,*.o,*.a
" Only keep configure.ac, configure.in, Makefile.am
" All others are auto-generated
set wildignore+=*.exe,*.o,*.a,*autoheader,*autoconf,*automake,*.in,*configure,*Makefile

cnoremap <Leader>ssh e scp://[user@]hostname//home/user/Documents/

" Behaviour of y to match D, C, S etc.
" Ie. Y yanks to end of line instead of yanking the entire line like yy.
nnoremap Y y$

" Preserve indentation in VsVim
"nnoremap S ^C

"nnoremap // I// <Esc>$
"vnoremap // :v/^\s*$/norm 0i//<CR>
"nnoremap <Leader>// ^dw

" Press ENTER with a visual selection to copy it to clipboard.
vnoremap <CR> "+y
vnoremap <Leader>y "+y

" Ctrl+ENTER to paste from system clipboard.
nnoremap <C-Enter> "+p
inoremap <C-Enter> <C-R>+

"nnoremap <CR> o<Esc>
nnoremap <CR> <CR>zz
"nnoremap <S-Enter> O<Esc>
"inoremap <S-Enter> <C-O>O

" Mash jk to return to normal mode.
""inoremap jj <Esc>
"inoremap jk <Esc>
"inoremap kj <Esc>
""inoremap kk <C-O>

"nnoremap n nzz
"nnoremap N Nzz

" TPope's Unimpaired-like prev/next maps
" Quickfix list:
nnoremap ]q :cn<CR>zz
nnoremap [q :cp<CR>zz
" Buffer list:
nnoremap ]b :bn<CR>
nnoremap [b :bp<CR>

" And a bit more quickfix list stuff
" Open quickfix list to the right:
nnoremap <Leader>co :copen<CR><C-W>L
nnoremap <Leader>cl :cclose<CR>
nnoremap <Leader>cc :.cc<CR>
nnoremap <Leader>cn :cn<CR>zz
nnoremap <Leader>cp :cp<CR>zz

" Other buffer shortcuts:
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bp :bp<CR>
nnoremap <Leader>bd :bd<CR>
nnoremap <Leader>bD :%bd<CR>
nnoremap <Leader>bb :ls<CR>

" Datetimes, v2.0
" Insert date
nnoremap <F2><F2> "=strftime("%d/%m/%Y")<CR>p
inoremap <F2><F2> <C-R>=strftime("%d/%m/%Y")<CR>
" Date + Time
nnoremap <F2><F3> "=strftime("%d/%m/%Y %H:%M")<CR>p
inoremap <F2><F3> <C-R>=strftime("%d/%m/%Y %H:%M")<CR>
" Date + Seconds
nnoremap <F2><F4> "=strftime("%d/%m/%Y %H:%M:%S")<CR>p
inoremap <F2><F4> <C-R>=strftime("%d/%m/%Y %H:%M:%S")<CR>
" Insert just time
nnoremap <F3><F3> "=strftime("%H:%M")<CR>p
inoremap <F3><F3> <C-R>=strftime("%H:%M")<CR>
" With seconds.
nnoremap <F3><F4> "=strftime("%H:%M:%S")<CR>p
inoremap <F3><F4> <C-R>=strftime("%H:%M:%S")<CR>

nnoremap <F4> o<ESC>0C-----------------<CR><C-R>=strftime("%d/%m/%Y %H:%M")<CR>:<CR>-----------------<ESC>
inoremap <F4> <ESC>0i-----------------<CR><C-R>=strftime("%d/%m/%Y %H:%M")<CR>:<CR>-----------------<CR>
" Start of day.
nnoremap <Leader><F4> o<ESC><F3>$BhYPl8<C-A>F r-
" Javascript format datetime.
"nnoremap <F5> "=strftime("%Y-%m-%dT%H:%M:%S.0000000Z")<CR>p
"inoremap <F5> <C-R>=strftime("%Y-%m-%dT%H:%M:%S.0000000Z")<CR>

" Save and execute currently open buffer:
"nnoremap <F5> :w<CR>:!./%<CR>
autocmd FileType c nnoremap <buffer> <F5> :w<CR>:!gcc % -Wall -std=c99 && ./a.out<CR>
" C++23: -std=c++2b
autocmd FileType cpp nnoremap <buffer> <F5> :w<CR>:!g++ % -std=c++2b -Wall && ./a.out<CR>
autocmd FileType python,bash,sh nnoremap <buffer> <F5> :w<CR>:!./%<CR>

" Convenient brace insertion map for C/C++
" TODO: Or remap the single brace, to match IDE behaviour, and add <Leader>{ to insert a single {
autocmd FileType c,cpp inoremap <buffer> {{ {<CR>}<Esc>O
autocmd FileType c,cpp inoremap <buffer> {<CR> {<CR>}<Esc>O

" Code folding for known languages
"autocmd FileType c,cpp,python,bash,sh setlocal foldmethod=syntax | setlocal foldcolumn=2 | normal zR

" Allow saving of files as sudo when I forgot to start vim using sudo.
" https://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work?rq=1
cnoremap w!! w !sudo tee > /dev/null %

" Associate Earth Explorer file types as XML
" Also `.XML` because neovim (or neovim+polyglot) became case sensitive at
" some point
autocmd BufRead,BufNewFile *.eef,*.EEF,*.hdr,*.HDR,*.XML set filetype=xml

vnoremap <Leader>i :norm I
vnoremap <Leader>a :norm A

cmap <Leader>cc while 1\|sleep 10\|call NextColor(1)\|endwhile<CR>


" From: https://github.com/vim/vim/blob/master/runtime/defaults.vim
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

" Detect our basic syntax definitions for ~/.vim/syntax/org-mode.vim
au BufRead,BufNewFile *.org set filetype=org-mode

" Integrated Terminal:
" Terminal ESC return to NORMAL mode
" TODO: Find when tnoremap was introduced, because it is not in version 800
" but :term is
if has("terminal") && v:version > 800
    tnoremap <Esc> <C-\><C-n>
endif

" Neovim:
if has("nvim")
    augroup neovim_terminal
        autocmd!
        " Enter INSERT mode in terminal buffers automatically
        autocmd TermOpen * startinsert
        " Disable all line numbers in terminal buffers
        autocmd  TermOpen * :set nonumber norelativenumber
    augroup END

    " Disable annoying mouse input
    set mouse=

    " Truecolour terminal colours
    " (256 mode uses the terminal ANSI 16)
    " " Dracula Xresources terminal theme
    " let g:terminal_color_0='#000000'
    " let g:terminal_color_1='#FF5555'
    " let g:terminal_color_2='#50FA7B'
    " let g:terminal_color_3='#F1FA8C'
    " let g:terminal_color_4='#BD93F9'
    " let g:terminal_color_5='#FF79C6'
    " let g:terminal_color_6='#8BE9FD'
    " let g:terminal_color_7='#BFBFBF'
    " let g:terminal_color_8='#4D4D4D'
    " let g:terminal_color_9='#FF6E67'
    " let g:terminal_color_10='#5AF78E'
    " let g:terminal_color_11='#F4F99D'
    " let g:terminal_color_12='#CAA9FA'
    " let g:terminal_color_13='#FF92D0'
    " let g:terminal_color_14='#9AEDFE'
    " let g:terminal_color_15='#E6E6E6'
    " Jellybeans xfce4-terminal theme (since nvim-qt uses theme FG)
    let g:terminal_color_0='#151515'
    let g:terminal_color_1='#cf6a4c'
    let g:terminal_color_2='#799d6a'
    let g:terminal_color_3='#ffb964'
    let g:terminal_color_4='#8197bf'
    let g:terminal_color_5='#c6b6ee'
    let g:terminal_color_6='#8fbfdc'
    let g:terminal_color_7='#e8e8d3'
    let g:terminal_color_8='#888888'
    let g:terminal_color_9='#cf6a4c'
    let g:terminal_color_10='#99ad6a'
    let g:terminal_color_11='#fad07a'
    let g:terminal_color_12='#8197bf'
    let g:terminal_color_13='#c6b6ee'
    let g:terminal_color_14='#8fbfdc'
    let g:terminal_color_15='#adadad'
endif

