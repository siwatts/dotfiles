set nobackup
set number
set numberwidth=3
set printoptions=number:y
set hlsearch
set ruler
set showcmd

"set encoding=utf8
"set fileencoding=utf8

" Splits
set splitright
set splitbelow

" Tab settings.
set tabstop=4
set shiftwidth=4
set expandtab

" Disable all blinking:
set guicursor+=a:blinkon0

" Indent settings. Detect filetype, or use auto & smart indent together.
set autoindent
filetype plugin indent on
"set smartindent
""set cindent

" Text width, auto word wrap. 0 off.
set tw=0
"set tw=100
" Default textwidth for markdown and text files.
au BufRead,BufNewFile *.txt,*.md setlocal textwidth=80

" Disable highlighting until a search. Toggle with F12, or quick hide with ??.
let hlstate=0
nnoremap <F12> :if (hlstate == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=1-hlstate <CR>
nnoremap ?? :noh<CR>

" ====================
" Colours:
" ====================

"" Force 256 colour mode for xfce4-terminal
"if $TERM == 'xterm'
"    set t_Co=256
"endif

syntax on

"" Jellybeans:
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '212121', '256ctermbg': '234' },
"\}
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '212121', '256ctermbg': '235' },
"\}
""lucius bg
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '303030', '256ctermbg': '236' },
"\}
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '3f3f3f', '256ctermbg': '237' },
"\}
"let g:jellybeans_overrides = {
"\   'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
"\}
"" JellybeansCustom:
"\   'Constant': { 'guifg': 'e5786d', '256ctermfg': '173' },
"\   'Constant': { 'guifg': 'ff5f5f', '256ctermfg': '203' },
"\   'Constant': { 'guifg': 'ff8787', '256ctermfg': '210' },
"\   'Identifier': { 'guifg': 'af87ff', '256ctermfg': '141' },
"\   'Identifier': { 'guifg': 'af87d7', '256ctermfg': '140' },
"\   'Special': { 'guifg': 'f1fa8c', '256ctermfg': '228' },
"\   'Special': { 'guifg': 'ffff60', '256ctermfg': '227' },
"\   'Special': { 'guifg': 'd4d987', '256ctermfg': '186' },
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '212121', '256ctermbg': '235' },
"\   'Constant': { 'guifg': 'ff875f', '256ctermfg': '209' },
"\   'Special': { 'guifg': 'd7d75f', '256ctermfg': '185' },
"\   'String': { 'guifg': '95e454', '256ctermfg': '113' },
"\   'Statement': { 'guifg': 'ff79c6', '256ctermfg': '212' },
"\   'Todo': { 'guibg': '000000', '256ctermbg': 'black' },
"\   'StatusLineNC': { 'guibg': '3a3a3a', '256ctermbg': '237' },
"\   'VertSplit': { 'guibg': '3a3a3a', 'guifg': '4e4e4e', '256ctermbg': '237', '256ctermfg': '239' },
"\}

"" Darkblue256:
"\   'background': { 'guibg': '212121', '256ctermbg': '235' },
"\   'NonText': { 'guifg': '0030ff', '256ctermfg': '4', 'guibg': '212121', '256ctermbg': '235' },
"let g:darkblue256_overrides = {
"\   'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
"\   'NonText': { 'guifg': '0030ff', '256ctermfg': '4' },
"\   'Todo': { 'guifg': 'ffffff', '256ctermfg': '231' },
"\}

" Override colorscheme diff highlighting.
function! SetCustomDiff()
    " Jellybeans:
    hi DiffAdd      guifg=#D2EBBE   guibg=#437019   ctermfg=193     ctermbg=22
    hi DiffDelete   guifg=#40000A   guibg=#700009   ctermfg=16      ctermbg=52
    hi DiffChange   guifg=#FFFFFF   guibg=#2B5B77   ctermfg=231     ctermbg=24
    hi DiffText     guifg=#8fbfdc   guibg=#000000   ctermfg=81      ctermbg=16  gui=reverse cterm=reverse
endfunction

" Apply custom diff whenever a colorscheme is applied.
autocmd ColorScheme * call SetCustomDiff()

"" Nofrils:
"let g:nofrils_strbackgrounds=1
"let g:nofrils_heavycomments=1
"let g:nofrils_heavylinenumbers=1

"let g:zenburn_high_Contrast=1
"let g:zenburn_transparent=1
"let g:solarized_termcolors=256

"let g:gruvbox_contrast_light='soft'
"let g:gruvbox_contrast_light='medium'
"let g:gruvbox_contrast_light='hard'
"let g:gruvbox_contrast_light='white'

color default
"color jellybeans
"color darkblue256
"color wombat256mod
"color desert256
"color twilight256
"color dracula
"color zenburn
"color lucius
"color PaperColor
"color gruvbox
"color triplejelly
"color nofrils-dark

"set background=dark
"set background=light

" Choose a random theme on startup
let g:schemes = [ 'darkblue256', 'desert256', 'dracula', 'gruvbox', 'jellybeans', 'lucius', 'twilight256', 'wombat256mod', 'xoria256', 'zenburn' ]

function! RandomiseTheme(schemes)
    let seconds = str2nr(strftime('%S'))
    call RandomiseThemeByNumber(seconds, a:schemes)
endfunction

function! RandomiseThemeByDay(schemes)
    let day = str2nr(strftime('%d'))
    call RandomiseThemeByNumber(day, a:schemes)
endfunction

function! RandomiseThemeByNumber(num, schemes)
    let scheme = a:schemes[a:num % len(a:schemes)]
    execute 'colorscheme ' . scheme
    "" Print resulting theme after open.
    echom 'Utilising colourscheme: "' . scheme . '"'
endfunction

" Toggle background setting
map <F6> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
" Random
map <F9> :call RandomiseTheme(g:schemes)<CR>
map <F10> :call RandomiseThemeByDay(g:schemes)<CR>

" Call colourscheme of the day on startup.
"autocmd VimEnter * call RandomiseThemeByDay()

"" Fall back to supported theme if in tty.
"if $TERM == 'linux'
"    color default
"endif

" ====================
" Mappings:
" ====================

" Disable middle mouse
map <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>
map <2-MiddleMouse> <Nop>
imap <2-MiddleMouse> <Nop>
map <3-MiddleMouse> <Nop>
imap <3-MiddleMouse> <Nop>
map <4-MiddleMouse> <Nop>
imap <4-MiddleMouse> <Nop>

" Scrolling
nmap <Up> <C-Y>
nmap <Down> <C-E>
nmap <Left> zh
nmap <Right> zl
nmap <Space> <C-F>

"nmap <Space> <Nop>
"let mapleader=" "
map \\ <Leader>
map <Leader>y "+y
map <Leader>Y "+y$
"map <Leader>d "+d
"map <Leader>D "+D
"map <Leader>x "+x
"map <Leader>X "+X
"map <Leader>c "+c
"map <Leader>C "+C
"map <Leader>s "+s
"map <Leader>S "+S
map <Leader>p "+p
map <Leader>P "+P

nmap <C-Enter> "+p
imap <C-Enter> <C-R>+

nmap <Leader>w :w<CR>
nmap <Leader>q :q<CR>
nmap <Leader>Q :qa<CR>
nmap <Leader>x :wq<CR>

nmap <Leader>s :Vex<CR>
nmap <Leader>v :vnew<CR>
nmap <Leader>d :diffthis<CR><C-w>w:diffthis<CR><C-w>w
nmap <Leader>D :diffoff<CR><C-w>w:diffoff<CR><C-w>w
nmap <Leader>e :Ex<CR>

nmap <Leader>o o<ESC>o
nmap <Leader>O O<ESC>O
nmap <Leader><CR> o<ESC>o<ESC>O

nmap <Leader>h 5h
nmap <Leader>j 5j
nmap <Leader>k 5k
nmap <Leader>l 5l

nmap <Leader>c o// 
nmap <Leader>C O// 
nmap <Leader>t o// TODO: 
nmap <Leader>T O// TODO: 

"nmap <Leader>s i <ESC>r
"nmap <Leader>S a <ESC>r
nmap <Leader>i i <ESC>r
nmap <Leader>a a <ESC>r

nnoremap Y y$
" Preserve indentation in VsVim
"nnoremap S ^C

nmap // I// <Esc>$
vmap // :v/^\s*$/norm 0i//<CR>
nmap <Leader>// ^dw

"vmap y ygv<Esc>
vmap <CR> "+y
vmap <Leader>y "+y

nmap <CR> o<Esc>
nmap <S-Enter> O<Esc>
imap <S-Enter> <C-O>O

" Mash jk to return to normal mode.
"imap jj <Esc>
imap jk <Esc>
imap kj <Esc>
"imap kk <C-O>

nmap n nzz
nmap N Nzz

" Insert time.
nmap <F2> "=strftime("%H:%M:%S")<CR>p
imap <F2> <C-R>=strftime("%H:%M:%S")<CR>
" Insert datetime.
nmap <F3> "=strftime("%d/%m/%Y %H:%M")<CR>p
imap <F3> <C-R>=strftime("%d/%m/%Y %H:%M")<CR>
" With seconds.
nmap <F4> "=strftime("%d/%m/%Y %H:%M:%S")<CR>p
imap <F4> <C-R>=strftime("%d/%m/%Y %H:%M:%S")<CR>
" Javascript format datetime.
nmap <F5> "=strftime("%Y-%m-%dT%H:%M:%S.0000000Z")<CR>p
imap <F5> <C-R>=strftime("%Y-%m-%dT%H:%M:%S.0000000Z")<CR>

vmap <Leader>i :norm I
vmap <Leader>a :norm A
