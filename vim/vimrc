" ====================
" Config:
" ====================
let g:use_custom_theme=0
let use_dark_theme=1
let use_base16_theme=0
let use_theme_of_the_day=0

let g:dark_theme='dracula'
let g:light_theme='gruvbox'

" ====================
" Settings:
" ====================
set nobackup
set number
set numberwidth=3
set printoptions=number:y
set hlsearch
set ruler
set showcmd

"set encoding=utf8
"set fileencoding=utf8

" Splits
set splitright
set splitbelow

" Tab settings.
set tabstop=4
set shiftwidth=4
set expandtab

"" Show invisible characters
"set list
"set listchars=tab:›\ ,space:⋅,trail:¬,extends:»,precedes:«
""eol:¬,

" Disable all blinking:
set guicursor+=a:blinkon0

" Indent settings. Detect filetype, or use auto & smart indent together.
set autoindent
filetype plugin indent on
"set smartindent
""set cindent

" Text width, auto word wrap. 0 off.
set tw=0
"set tw=100
" Default textwidth for markdown and text files.
au BufRead,BufNewFile *.txt,*.md setlocal textwidth=80

" Disable highlighting until a search. Toggle with F12, or quick hide with ??.
let hlstate=0
nnoremap <F12> :if (hlstate == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=1-hlstate <CR>
nnoremap ?? :noh<CR>

" ====================
" Colours:
" ====================
"" Force 256 colour mode for xfce4-terminal
"if $TERM == 'xterm'
"    set t_Co=256
"endif

syntax on

"" Jellybeans:
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '212121', '256ctermbg': '234' },
"\}
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '212121', '256ctermbg': '235' },
"\}
""lucius bg
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '303030', '256ctermbg': '236' },
"\}
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '3f3f3f', '256ctermbg': '237' },
"\}
"let g:jellybeans_overrides = {
"\   'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
"\}
"" JellybeansCustom:
"\   'Constant': { 'guifg': 'e5786d', '256ctermfg': '173' },
"\   'Constant': { 'guifg': 'ff5f5f', '256ctermfg': '203' },
"\   'Constant': { 'guifg': 'ff8787', '256ctermfg': '210' },
"\   'Identifier': { 'guifg': 'af87ff', '256ctermfg': '141' },
"\   'Identifier': { 'guifg': 'af87d7', '256ctermfg': '140' },
"\   'Special': { 'guifg': 'f1fa8c', '256ctermfg': '228' },
"\   'Special': { 'guifg': 'ffff60', '256ctermfg': '227' },
"\   'Special': { 'guifg': 'd4d987', '256ctermfg': '186' },
"let g:jellybeans_overrides = {
"\   'background': { 'guibg': '212121', '256ctermbg': '235' },
"\   'Constant': { 'guifg': 'ff875f', '256ctermfg': '209' },
"\   'Special': { 'guifg': 'd7d75f', '256ctermfg': '185' },
"\   'String': { 'guifg': '95e454', '256ctermfg': '113' },
"\   'Statement': { 'guifg': 'ff79c6', '256ctermfg': '212' },
"\   'Todo': { 'guibg': '000000', '256ctermbg': 'black' },
"\   'StatusLineNC': { 'guibg': '3a3a3a', '256ctermbg': '237' },
"\   'VertSplit': { 'guibg': '3a3a3a', 'guifg': '4e4e4e', '256ctermbg': '237', '256ctermfg': '239' },
"\}

"" Darkblue256:
"\   'background': { 'guibg': '212121', '256ctermbg': '235' },
"\   'NonText': { 'guifg': '0030ff', '256ctermfg': '4', 'guibg': '212121', '256ctermbg': '235' },
"let g:darkblue256_overrides = {
"\   'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
"\   'NonText': { 'guifg': '0030ff', '256ctermfg': '4' },
"\   'Todo': { 'guifg': 'ffffff', '256ctermfg': '231' },
"\}

" Override colorscheme diff highlighting.
function! SetCustomDiff()
    if !has("gui_running") && ( $TERM == 'linux' || $TERM == 'cygwin' || &t_Co < 256 )
        " Restore default diff.
        hi DiffAdd      ctermfg=none    ctermbg=1   cterm=none  term=bold
        hi DiffDelete   ctermfg=4       ctermbg=6   cterm=bold  term=bold
        hi DiffChange   ctermfg=none    ctermbg=5   cterm=none  term=bold
        hi DiffText     ctermfg=none    ctermbg=1   cterm=bold  term=reverse
    else
        " Jellybeans:
        hi DiffAdd      guifg=#D2EBBE   guibg=#437019   ctermfg=193     ctermbg=22  gui=none    cterm=none
        "hi DiffDelete   guifg=#40000A   guibg=#700009   ctermfg=16      ctermbg=52  gui=none    cterm=none
        hi DiffDelete   guifg=#40000A   guibg=#700009   ctermfg=232      ctermbg=52  gui=none    cterm=none
        hi DiffChange   guifg=#FFFFFF   guibg=#2B5B77   ctermfg=231     ctermbg=24  gui=none    cterm=none
        "hi DiffText     guifg=#8fbfdc   guibg=#000000   ctermfg=81      ctermbg=16  gui=reverse cterm=reverse
        hi DiffText     guifg=#8fbfdc   guibg=#000000   ctermfg=81      ctermbg=232  gui=reverse cterm=reverse
    endif
endfunction

" Apply custom diff whenever a colorscheme is applied.
autocmd ColorScheme * call SetCustomDiff()

"" Nofrils:
let g:nofrils_strbackgrounds=1
let g:nofrils_heavycomments=1
let g:nofrils_heavylinenumbers=1

"let g:zenburn_high_Contrast=1
"let g:zenburn_transparent=1
"let g:solarized_termcolors=256

"let g:gruvbox_contrast_light='soft'
"let g:gruvbox_contrast_light='medium'
let g:gruvbox_contrast_light='hard'
"let g:gruvbox_contrast_light='white'

let g:seoul256_background=237
let g:seoul256_light_background=256

" If using a base16 theme that also reassigns colours 16-21.
let base16colorspace=256
" base16_shell_path will apply the terminal shell script on vim colorchange
"let g:base16_shell_path='~/repos/dotfiles/base16/sh'

function! SetCustomScheme(use_dark)
    if a:use_dark
        set background=dark
        execute 'colorscheme ' . g:dark_theme
    else
        set background=light
        execute 'colorscheme ' . g:light_theme
    endif
endfunction

" Set the colorscheme
if !has("gui_running") && ( $TERM == 'linux' || $TERM == 'cygwin' || &t_Co < 256 )
    " Fall back to supported theme if in tty or cygwin.
    color default
    set background=dark
else
    " Set a colourful 256 / gui theme.
    if use_base16_theme
        color base16-eighties
    elseif use_custom_theme
        call SetCustomScheme(use_dark_theme)
    else
        color default
        if use_dark_theme && !has("gui_running")
            set background=dark
        endif
    endif
endif

" ====================
" Random colourscheme:
" ====================
" Scheme choices:
let g:schemes = [ 'darkblue256', 'desert256', 'dracula', 'gruvbox', 'hybrid', 'iceberg', 'jellybeans', 'lucius', 'twilight256', 'wombat256mod', 'xoria256', 'zenburn' ]
" Light
let g:schemes_light_all = [ 'github', 'gruvbox', 'hybrid', 'lucius', 'nofrils-acme', 'nofrils-light', 'nofrils-sepia', 'one', 'PaperColor', 'seoul256-light', 'Tomorrow' ]
let g:schemes_light_more = [ 'gruvbox', 'hybrid', 'lucius', 'nofrils-acme', 'seoul256-light', 'Tomorrow' ]
let g:schemes_light = [ 'gruvbox', 'lucius', 'nofrils-acme', 'seoul256-light' ]
" Dark
let g:schemes_dark_all = [ 'apprentice', 'blackboard', 'darkblue256', 'desert256', 'dracula', 'gruvbox', 'hybrid', 'iceberg', 'jellybeans', 'lucius', 'one', 'PaperColor', 'seoul256', 'simple-green', 'simple-orange', 'simple', 'sorcerer', 'sourcerer', 'spacegray', 'Tomorrow-Night-Bright', 'Tomorrow-Night-Eighties', 'Tomorrow-Night', 'triplejelly', 'twilight256', 'twilight_v', 'wombat256mod', 'xoria256', 'zenburn' ]
let g:schemes_dark_more = [ 'apprentice', 'darkblue256', 'desert256', 'dracula', 'gruvbox', 'hybrid', 'iceberg', 'jellybeans', 'lucius', 'seoul256', 'sorcerer', 'sourcerer', 'spacegray', 'Tomorrow-Night-Eighties', 'Tomorrow-Night', 'triplejelly', 'twilight256', 'twilight_v', 'wombat256mod', 'xoria256', 'zenburn' ]
let g:schemes_dark = [ 'darkblue256', 'desert256', 'dracula', 'gruvbox', 'hybrid', 'iceberg', 'jellybeans', 'lucius', 'seoul256', 'spacegray', 'triplejelly', 'twilight256', 'wombat256mod', 'xoria256', 'zenburn' ]

function! RandomiseTheme(schemes)
    let seconds = str2nr(strftime('%S'))
    call RandomiseThemeByNumber(seconds, a:schemes)
endfunction

function! RandomiseThemeByDay(schemes)
    let day = str2nr(system("date +\%j"))
    "let day = str2nr(strftime('%d'))
    call RandomiseThemeByNumber(day, a:schemes)
endfunction

function! RandomiseThemeByNumber(num, schemes)
    let scheme = a:schemes[a:num % len(a:schemes)]
    execute 'colorscheme ' . scheme
    "" Print resulting theme after open.
    echom 'Utilising colourscheme: "' . scheme . '"'
endfunction

" Colour mappings:
" Toggle background setting
map <F6> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
" Random light/dark
"map <F7> :set background=light<CR>:call RandomiseTheme(g:schemes_light)<CR>
"map <F8> :set background=dark<CR>:call RandomiseTheme(g:schemes_dark)<CR>
" Reset to default theme
map <F7> :colorscheme default<CR>
" Apply base16 theme
map <F11> :colorscheme base16-eighties<CR>
" Regular light/dark
map <F9> :call SetCustomScheme(0)<CR>
map <F10> :call SetCustomScheme(1)<CR>
" Daily light/dark
map <Leader><F9> :set background=light<CR>:call RandomiseThemeByDay(g:schemes_light)<CR>
map <Leader><F10> :set background=dark<CR>:call RandomiseThemeByDay(g:schemes_dark)<CR>

" Choose a random theme on startup, if requested and supported.
if use_theme_of_the_day && (has("gui_running") || ( $TERM != 'linux' && $TERM != 'cygwin' && &t_Co == 256 ))
    if use_dark_theme
        autocmd VimEnter * set background=dark | call RandomiseThemeByDay(g:schemes_dark) | call SetCustomDiff()
    else
        autocmd VimEnter * set background=light | call RandomiseThemeByDay(g:schemes_light) | call SetCustomDiff()
    endif
endif

" ====================
" Mappings:
" ====================
" Disable middle mouse
map <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>
map <2-MiddleMouse> <Nop>
imap <2-MiddleMouse> <Nop>
map <3-MiddleMouse> <Nop>
imap <3-MiddleMouse> <Nop>
map <4-MiddleMouse> <Nop>
imap <4-MiddleMouse> <Nop>

" Scrolling
nmap <Up> zH
nmap <Down> zL
nmap <Left> zh
nmap <Right> zl
nmap <Space> <C-F>

"nmap <Space> <Nop>
"let mapleader=" "
map \\ <Leader>
map <Leader>y "+y
map <Leader>Y "+y$
"map <Leader>d "+d
"map <Leader>D "+D
"map <Leader>x "+x
"map <Leader>X "+X
"map <Leader>c "+c
"map <Leader>C "+C
"map <Leader>s "+s
"map <Leader>S "+S
map <Leader>p "+p
map <Leader>P "+P

nmap <C-Enter> "+p
imap <C-Enter> <C-R>+

nmap <Leader>w :w<CR>
nmap <Leader>q :q<CR>
nmap <Leader>Q :qa<CR>
nmap <Leader>x :wq<CR>

nmap <Leader>s :Vex<CR>
nmap <Leader>v :vnew<CR>
nmap <Leader>e :Ex<CR>

nmap <Leader>da :windo diffthis<CR><C-W>w
nmap <Leader>dh :diffthis<CR><C-W>h:diffthis<CR><C-W>l
nmap <Leader>dl :diffthis<CR><C-W>l:diffthis<CR><C-W>h
nmap <Leader>dj :diffthis<CR><C-W>j:diffthis<CR><C-W>k
nmap <Leader>dk :diffthis<CR><C-W>k:diffthis<CR><C-W>j
nmap <Leader>dd :diffthis<CR><C-W>w:diffthis<CR><C-W>W
nmap <Leader>dt :diffthis<CR>
nmap <Leader>do :diffoff<CR>
nmap <Leader>ds :windo diffoff<CR><C-W>w
nmap <Leader>dr :windo diffoff<CR>:windo diffthis<CR><C-W>w
nmap <Leader>D :diffoff<CR><C-W>w:diffoff<CR><C-w>W

nmap <Leader>o o<ESC>o
nmap <Leader>O O<ESC>O
nmap <Leader><CR> o<ESC>o<ESC>O

nmap <Leader>h 5h
nmap <Leader>j 5j
nmap <Leader>k 5k
nmap <Leader>l 5l

nmap <Leader>c o// 
nmap <Leader>C O// 
nmap <Leader>t o// TODO: 
nmap <Leader>T O// TODO: 

"nmap <Leader>s i <ESC>r
"nmap <Leader>S a <ESC>r
nmap <Leader>i i <ESC>r
nmap <Leader>a a <ESC>r

nnoremap Y y$
" Preserve indentation in VsVim
"nnoremap S ^C

nmap // I// <Esc>$
vmap // :v/^\s*$/norm 0i//<CR>
nmap <Leader>// ^dw

"vmap y ygv<Esc>
vmap <CR> "+y
vmap <Leader>y "+y

nmap <CR> o<Esc>
nmap <S-Enter> O<Esc>
imap <S-Enter> <C-O>O

" Mash jk to return to normal mode.
"imap jj <Esc>
imap jk <Esc>
imap kj <Esc>
"imap kk <C-O>

nmap n nzz
nmap N Nzz

" Insert time.
nmap <F2> "=strftime("%H:%M:%S")<CR>p
imap <F2> <C-R>=strftime("%H:%M:%S")<CR>
nmap <Leader><F2> "=strftime("%H:%M")<CR>p
imap <Leader><F2> <C-R>=strftime("%H:%M")<CR>
" Insert datetime.
nmap <F3> "=strftime("%d/%m/%Y %H:%M")<CR>p
imap <F3> <C-R>=strftime("%d/%m/%Y %H:%M")<CR>
" With seconds.
nmap <F4> "=strftime("%d/%m/%Y %H:%M:%S")<CR>p
imap <F4> <C-R>=strftime("%d/%m/%Y %H:%M:%S")<CR>
" Javascript format datetime.
nmap <F5> "=strftime("%Y-%m-%dT%H:%M:%S.0000000Z")<CR>p
imap <F5> <C-R>=strftime("%Y-%m-%dT%H:%M:%S.0000000Z")<CR>

vmap <Leader>i :norm I
vmap <Leader>a :norm A
